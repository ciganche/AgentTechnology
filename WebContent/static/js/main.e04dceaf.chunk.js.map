{"version":3,"sources":["Components/App.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","messageTypes","classes","classesSocket","WebSocket","runningAgents","runningAgentsSocket","logs","loggerSocket","searchResultsSocket","createInstanceClass","createInstanceName","selectedMessageType","sender","senderRequired","searchResults","reciever","message","messageRequired","onmessage","evt","setState","JSON","parse","data","list","length","push","handleCreateInstanceClassChange","bind","assertThisInitialized","handleCreateInstanceNameChange","handleSelectedMessageTypeChange","handleSendMessage","handleSenderChange","handleSenderRequiredChange","handleRecieverChange","handleMessageRequiredChange","handleMessageChange","handleCreate","handleDelete","clearLogs","loadMessageTypes","loadClasses","loadRunningAgents","_this2","axios","get","then","res","_this3","_this4","event","preventDefault","url","post","agentClass","agentName","delete","Number","performative","conversationID","uuidv4","receivers","aid","content","target","value","checked","_this5","react_default","a","createElement","style","width","marginLeft","marginRight","onSubmit","onChange","map","item","placeholder","type","disabled","trim","borderSpacing","name","onClick","index","backgroundColor","float","href","clear","description","height","overflowY","Component","Boolean","window","location","hostname","match","ReactDOM","render","Components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e04dceaf.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Component } from 'react';\r\nimport axios from 'axios';\r\nimport AgentWrapper from '../Models/AgentWrapper';\r\nimport SearchResult from '../Models/SearchResult';\r\nimport AID from '../Models/AID';\r\nimport uuidv4 from 'uuid/v4';\r\n\r\ninterface IAgentState{\r\n  messageTypes: string[];\r\n  classes: string[];\r\n  classesSocket: WebSocket;\r\n  runningAgents: AgentWrapper[];\r\n  runningAgentsSocket: WebSocket;\r\n  searchResultsSocket: WebSocket;\r\n  logs: string [];\r\n  loggerSocket: WebSocket;\r\n  createInstanceClass: string;\r\n  createInstanceName: string;\r\n  selectedMessageType: string;\r\n  sender: string;\r\n  reciever: string;\r\n  message: string;\r\n  senderRequired: boolean;\r\n  messageRequired: boolean;\r\n  searchResults: SearchResult[];\r\n}\r\n\r\ninterface IMessageData{\r\n  performative: string,\r\n  conversationID: string,\r\n  receivers: AID[],\r\n  sender?: AID,\r\n  content?: string\r\n}\r\n\r\n class App extends Component<any, IAgentState>{\r\n\r\n  constructor(props: any){\r\n    super(props);\r\n    this.state = {\r\n      messageTypes : [],\r\n      classes : [],\r\n      classesSocket: new WebSocket('ws://localhost:8080/AgentTechnology/refreshAgentClasses'),\r\n      runningAgents : [],\r\n      runningAgentsSocket : new WebSocket('ws://localhost:8080/AgentTechnology/refreshRunningAgents'),\r\n      logs : [],\r\n      loggerSocket : new WebSocket('ws://localhost:8080/AgentTechnology/logger'),\r\n      searchResultsSocket : new WebSocket('ws://localhost:8080/AgentTechnology/searchResults'),\r\n      createInstanceClass : '',\r\n      createInstanceName : '',\r\n      selectedMessageType: '',\r\n      sender: '',\r\n      senderRequired: false,\r\n      searchResults: [],\r\n      reciever: '',\r\n      message: '',\r\n      messageRequired: false\r\n    }\r\n\r\n    this.state.classesSocket.onmessage = evt => {\r\n      this.setState({\r\n      \tclassesSocket : JSON.parse(evt.data).list\r\n      })\r\n\r\n      if(this.state.classes.length > 0 ){\r\n        this.setState({\r\n          createInstanceClass : this.state.classes[0]\r\n        });\r\n      }\r\n    }\r\n\r\n    this.state.runningAgentsSocket.onmessage = evt => {\r\n      this.setState({\r\n      \trunningAgents : JSON.parse(evt.data).list\r\n      })\r\n\r\n      if(this.state.runningAgents.length > 0){\r\n        this.setState({\r\n          sender : '0',\r\n          reciever : '0',\r\n        })\r\n      }\r\n      else{\r\n        this.setState({\r\n          sender : '',\r\n          reciever : '',\r\n        })\r\n      }\r\n    }\r\n\r\n    this.state.loggerSocket.onmessage = evt => {\r\n      this.state.logs.push(evt.data);\r\n    }\r\n\r\n    this.state.searchResultsSocket.onmessage = evt => {\r\n      this.setState({\r\n        searchResults : JSON.parse(evt.data).list\r\n      })\r\n    }\r\n\r\n    this.handleCreateInstanceClassChange = this.handleCreateInstanceClassChange.bind(this);\r\n    this.handleCreateInstanceNameChange = this.handleCreateInstanceNameChange.bind(this);\r\n    this.handleSelectedMessageTypeChange = this.handleSelectedMessageTypeChange.bind(this);\r\n    this.handleSendMessage = this.handleSendMessage.bind(this);\r\n    this.handleSenderChange = this.handleSenderChange.bind(this);\r\n    this.handleSenderRequiredChange = this.handleSenderRequiredChange.bind(this);\r\n    this.handleRecieverChange = this.handleRecieverChange.bind(this);\r\n    this.handleMessageRequiredChange = this.handleMessageRequiredChange.bind(this);\r\n    this.handleMessageChange = this.handleMessageChange.bind(this);\r\n    this.handleCreate = this.handleCreate.bind(this);\r\n    this.handleDelete = this.handleDelete.bind(this);\r\n    this.clearLogs = this.clearLogs.bind(this);\r\n  }\r\n\r\n\r\n  public componentDidMount(){\r\n    this.loadMessageTypes();\r\n    this.loadClasses();\r\n    this.loadRunningAgents();\r\n  }\r\n\r\n  private loadMessageTypes(){\r\n    let url = 'http://localhost:8080/AgentTechnology/rest/messages';\r\n\r\n        axios.get(url)\r\n            .then(res => {\r\n                this.setState({\r\n                  messageTypes: res.data});\r\n\r\n                  if(this.state.messageTypes.length > 0 ){\r\n                    this.setState({\r\n                      selectedMessageType : this.state.messageTypes[0]\r\n                    });\r\n                  }\r\n    })\r\n  }\r\n\r\n  private loadClasses(){\r\n    let url = 'http://localhost:8080/AgentTechnology/rest/agents/classes/';\r\n\r\n        axios.get(url)\r\n            .then(res => {\r\n                this.setState({\r\n                  classes: res.data.list});\r\n\r\n                  if(this.state.classes.length > 0 ){\r\n                    this.setState({\r\n                      createInstanceClass : this.state.classes[0]\r\n                    });\r\n                  }\r\n    })\r\n  }\r\n\r\n  private loadRunningAgents(){\r\n    let url = 'http://localhost:8080/AgentTechnology/rest/agents/running/';\r\n\r\n        axios.get(url)\r\n            .then(res => {\r\n                this.setState({\r\n                  runningAgents: res.data.list\r\n        });\r\n        if(this.state.runningAgents.length > 0){\r\n          this.setState({\r\n            sender : '0',\r\n            reciever : '0',\r\n          })\r\n        }      \r\n        else{\r\n          this.setState({\r\n            sender : '',\r\n            reciever : '',\r\n          })\r\n        }\r\n    })\r\n  }\r\n\r\n  private handleCreate(event:any){\r\n    event.preventDefault();\r\n    let url = 'http://localhost:8080/AgentTechnology/rest/agents/running/'+this.state.createInstanceClass+'/'+this.state.createInstanceName;\r\n    axios.post(url);\r\n  }\r\n\r\n  private handleDelete(agentClass: string, agentName: string){\r\n    let url = 'http://localhost:8080/AgentTechnology/rest/agents/running/'+agentClass+'/'+agentName;\r\n    axios.delete(url);\r\n  }\r\n\r\n  private handleSendMessage(event:any){\r\n    event.preventDefault();\r\n    let url = 'http://localhost:8080/AgentTechnology/rest/messages';\r\n\r\n    let sender = this.state.runningAgents[Number(this.state.sender)];\r\n    let reciever = this.state.runningAgents[Number(this.state.reciever)];\r\n    var data : IMessageData;\r\n    data = {\r\n      performative: this.state.selectedMessageType,\r\n      conversationID: uuidv4(),\r\n      receivers:[ reciever.aid]\r\n    }\r\n\r\n    if(this.state.senderRequired){\r\n      data.sender = sender.aid\r\n    }\r\n\r\n    if(this.state.messageRequired){\r\n      data.content = this.state.message\r\n    }\r\n\r\n    axios.post(url, data);\r\n  }\r\n  \r\n  private handleCreateInstanceClassChange(event: any) {\r\n    this.setState({\r\n        createInstanceClass: event.target.value\r\n    })\r\n  }\r\n\r\n  private handleCreateInstanceNameChange(event: any) {\r\n    this.setState({\r\n        createInstanceName: event.target.value\r\n    })\r\n  }\r\n\r\n  private handleSelectedMessageTypeChange(event: any) {\r\n    this.setState({\r\n        selectedMessageType: event.target.value\r\n    })\r\n  }\r\n\r\n  private handleSenderRequiredChange(event: any) {\r\n    this.setState({\r\n        senderRequired: event.target.checked\r\n    })\r\n  }\r\n\r\n  private handleSenderChange(event: any) {\r\n    this.setState({\r\n        sender: event.target.value\r\n    })\r\n  }\r\n\r\n  private handleRecieverChange(event: any) {\r\n    this.setState({\r\n        reciever: event.target.value\r\n    })\r\n  }\r\n\r\n  private handleMessageRequiredChange(event: any) {\r\n    this.setState({\r\n        messageRequired: event.target.checked\r\n    })\r\n  }\r\n\r\n  private handleMessageChange(event: any) {\r\n    this.setState({\r\n        message: event.target.value\r\n    })\r\n  }\r\n\r\n  private clearLogs(event: any) {\r\n    this.setState({\r\n        logs: []\r\n    })\r\n  }\r\n\r\n   public render(){\r\n     return (\r\n      <div style={{ width: \"50em\", marginLeft:\"auto\", marginRight:\"auto\"}}>       \r\n      <h1>Classes</h1>\r\n      <div style={{marginLeft:\"3em\"}}>\r\n      <form onSubmit={this.handleCreate}>\r\n        <select value={this.state.createInstanceClass} onChange={this.handleCreateInstanceClassChange}>\r\n        {this.state.classes.map((item) => (\r\n          <option>{item}</option>\r\n      ))}\r\n        </select>\r\n        <input placeholder=\"Enter instance name...\" value={this.state.createInstanceName} onChange={this.handleCreateInstanceNameChange}></input>\r\n        <input type=\"submit\" value=\"Submit\" disabled={this.state.createInstanceClass.trim() ===\"\" || this.state.createInstanceName.trim() ===\"\"}></input>\r\n      </form> \r\n      </div>     \r\n      <br/>\r\n      <h1>Running Agents</h1>\r\n      <table style={{marginLeft:\"3em\", borderSpacing: \"0.5em\"}}>\r\n        <tbody>\r\n          {this.state.runningAgents.map(item =>(\r\n            <tr>\r\n              <td>{item.aid.name}</td>\r\n              <td><button onClick={() => this.handleDelete(item.aid.type.name, item.aid.name)}>Delete</button></td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <br/>\r\n      <h1>Messages</h1>\r\n      <form onSubmit={this.handleSendMessage}>\r\n      <table style={{marginLeft:\"3em\", borderSpacing: \"0.5em\"}}>\r\n      <tbody>\r\n        <tr>\r\n      <td>Sender: </td>\r\n      <td><input type=\"checkbox\" checked={this.state.senderRequired} onChange={this.handleSenderRequiredChange}></input>\r\n      <select value={this.state.sender} onChange={this.handleSenderChange} disabled={!this.state.senderRequired}>\r\n        {this.state.runningAgents.map((item,index) => (\r\n          <option value ={index}>{item.aid.name}</option>\r\n      ))}\r\n        </select>\r\n        </td>\r\n        </tr>\r\n        <tr>\r\n        <td>Reciever: </td>\r\n        <td> &emsp; <select value={this.state.reciever} onChange={this.handleRecieverChange}>\r\n        {this.state.runningAgents.map((item,index) => (\r\n          <option value ={index}>{item.aid.name}</option>\r\n      ))}\r\n        </select>\r\n        </td>\r\n        </tr>\r\n        <tr>\r\n        <td>Message type: </td>\r\n        <td> &emsp; <select value={this.state.selectedMessageType} onChange={this.handleSelectedMessageTypeChange}>\r\n        {this.state.messageTypes.map(item => (\r\n          <option>{item}</option>\r\n      ))}\r\n        </select>\r\n        </td>\r\n        </tr>\r\n        <tr>\r\n        <td>Message: </td>        \r\n        <td>\r\n        <input type=\"checkbox\" checked={this.state.messageRequired} onChange={this.handleMessageRequiredChange}></input> \r\n        <input placeholder=\"Enter message...\" value={this.state.message} onChange={this.handleMessageChange} disabled={!this.state.messageRequired}></input>\r\n        </td>\r\n        </tr>\r\n        <tr>\r\n        <input type=\"submit\" value=\"Submit\" disabled={(this.state.sender.trim()===\"\" && this.state.senderRequired === true) || this.state.reciever.trim()===\"\" || (this.state.message.trim() ===\"\" && this.state.messageRequired === true) || this.state.selectedMessageType.trim() ===\"\"}></input>\r\n        </tr>\r\n      </tbody>\r\n      </table>\r\n      </form>\r\n      <br/>\r\n      <h1>Search results</h1>\r\n      <table style={{marginLeft:\"3em\"}}>\r\n        <tbody>\r\n        {this.state.searchResults.map(item =>(\r\n          <tr style={{backgroundColor:\"#ACF3D3\"}}>\r\n            <div>\r\n              <p style={{float : \"left\"}}>{item.name}</p>\r\n              <p style={{float : \"right\"}}><a href={item.url}>{item.url}</a></p>\r\n            </div>\r\n              <p style={{float:\"left\", clear:\"both\"}}>{item.description}</p>\r\n            <br/>\r\n          </tr>\r\n        ))}\r\n        </tbody>\r\n      </table> \r\n      <br/>\r\n      <h1>Logs</h1>\r\n      <div style={{ marginLeft:\"3em\", height: \"6.5em\", overflowY:\"scroll\"}}>\r\n        <button onClick={this.clearLogs}>Clear</button>\r\n        <ul>\r\n        {this.state.logs.map(item =>(\r\n          <li>{item}</li>\r\n        ))}\r\n        </ul>\r\n      </div>\r\n      </div>\r\n     )\r\n   }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}