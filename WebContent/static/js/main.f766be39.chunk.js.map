{"version":3,"sources":["Components/App.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","messageTypes","classes","classesSocket","WebSocket","getHostAddress","runningAgents","localRunningAgents","runningAgentsSocket","logs","loggerSocket","searchResultsSocket","createInstanceClass","createInstanceName","selectedMessageType","sender","senderRequired","searchResults","reciever","message","messageRequired","onmessage","evt","setState","JSON","parse","data","list","length","filter","runningAgent","aid","host","address","window","location","prevState","concat","toConsumableArray","handleCreateInstanceClassChange","bind","assertThisInitialized","handleCreateInstanceNameChange","handleSelectedMessageTypeChange","handleSendMessage","handleSenderChange","handleSenderRequiredChange","handleRecieverChange","handleMessageRequiredChange","handleMessageChange","handleCreate","handleDelete","clearLogs","loadMessageTypes","loadClasses","loadRunningAgents","href","replace","_this2","url","axios","get","then","res","_this3","_this4","event","preventDefault","post","agentClass","agentName","delete","Number","performative","conversationID","uuidv4","receivers","content","target","value","checked","targsenet","_this5","react_default","a","createElement","style","width","marginLeft","marginRight","onSubmit","onChange","map","item","placeholder","type","disabled","trim","borderSpacing","name","onClick","index","paddingLeft","paddingRight","paddingTop","paddingBottom","height","marginTop","overflowY","border","borderWidth","backgroundColor","float","clear","description","Component","Boolean","hostname","match","ReactDOM","render","Components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f766be39.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Component } from 'react';\r\nimport axios from 'axios';\r\nimport AgentWrapper from '../Models/AgentWrapper';\r\nimport SearchResult from '../Models/SearchResult';\r\nimport AID from '../Models/AID';\r\nimport uuidv4 from 'uuid/v4';\r\n\r\ninterface IAgentState{\r\n  messageTypes: string[];\r\n  classes: string[];\r\n  classesSocket: WebSocket;\r\n  runningAgents: AgentWrapper[];\r\n  localRunningAgents: AgentWrapper[];\r\n  runningAgentsSocket: WebSocket;\r\n  searchResultsSocket: WebSocket;\r\n  logs: string [];\r\n  loggerSocket: WebSocket;\r\n  createInstanceClass: string;\r\n  createInstanceName: string;\r\n  selectedMessageType: string;\r\n  sender: string;\r\n  reciever: string;\r\n  message: string;\r\n  senderRequired: boolean;\r\n  messageRequired: boolean;\r\n  searchResults: SearchResult[];\r\n}\r\n\r\ninterface IMessageData{\r\n  performative: string,\r\n  conversationID: string,\r\n  receivers: AID[],\r\n  sender?: AID,\r\n  content?: string\r\n}\r\n\r\n class App extends Component<any, IAgentState>{\r\n\r\n  constructor(props: any){\r\n    super(props);\r\n    this.state = {\r\n      messageTypes : [],\r\n      classes : [],\r\n      classesSocket: new WebSocket('ws://'+this.getHostAddress()+'refreshAgentClasses'),\r\n      runningAgents : [],\r\n      localRunningAgents : [],\r\n      runningAgentsSocket : new WebSocket('ws://'+this.getHostAddress()+'refreshRunningAgents'),\r\n      logs : [],\r\n      loggerSocket : new WebSocket('ws://'+this.getHostAddress()+'logger'),\r\n      searchResultsSocket : new WebSocket('ws://'+this.getHostAddress()+'searchResults'),\r\n      createInstanceClass : '',\r\n      createInstanceName : '',\r\n      selectedMessageType: '',\r\n      sender: '',\r\n      senderRequired: false,\r\n      searchResults: [],\r\n      reciever: '',\r\n      message: '',\r\n      messageRequired: false\r\n    }\r\n\r\n    this.state.classesSocket.onmessage = evt => {\r\n      this.setState({\r\n      \tclasses : JSON.parse(evt.data).list\r\n      })\r\n\r\n      if(this.state.classes.length > 0 ){\r\n        this.setState({\r\n          createInstanceClass : this.state.classes[0]\r\n        });\r\n      }\r\n    }\r\n\r\n    this.state.runningAgentsSocket.onmessage = evt => {\r\n      this.setState({\r\n      \trunningAgents : JSON.parse(evt.data).list\r\n      })\r\n\r\n      this.setState(\r\n      {\r\n        localRunningAgents: (this.state.runningAgents.filter((runningAgent) =>\r\n          runningAgent.aid.host.address === window.location.host))\r\n        })\r\n\r\n        if(this.state.runningAgents.length > 0){\r\n          this.setState({\r\n            reciever : '0'\r\n          })\r\n        }\r\n        else{\r\n          this.setState({\r\n            reciever : '',\r\n          })\r\n        }\r\n\r\n      if(this.state.localRunningAgents.length > 0){\r\n        this.setState({\r\n          sender : '0'\r\n        })\r\n      }\r\n      else{\r\n        this.setState({\r\n          sender : ''\r\n        })\r\n      }\r\n    }\r\n\r\n    this.state.loggerSocket.onmessage = evt => {\r\n      this.setState(prevState => ({\r\n        logs: [...prevState.logs, evt.data]\r\n      }))\r\n    }\r\n\r\n    this.state.searchResultsSocket.onmessage = evt => {\r\n      this.setState({\r\n        searchResults : JSON.parse(evt.data).list\r\n      })\r\n    }\r\n\r\n    this.handleCreateInstanceClassChange = this.handleCreateInstanceClassChange.bind(this);\r\n    this.handleCreateInstanceNameChange = this.handleCreateInstanceNameChange.bind(this);\r\n    this.handleSelectedMessageTypeChange = this.handleSelectedMessageTypeChange.bind(this);\r\n    this.handleSendMessage = this.handleSendMessage.bind(this);\r\n    this.handleSenderChange = this.handleSenderChange.bind(this);\r\n    this.handleSenderRequiredChange = this.handleSenderRequiredChange.bind(this);\r\n    this.handleRecieverChange = this.handleRecieverChange.bind(this);\r\n    this.handleMessageRequiredChange = this.handleMessageRequiredChange.bind(this);\r\n    this.handleMessageChange = this.handleMessageChange.bind(this);\r\n    this.handleCreate = this.handleCreate.bind(this);\r\n    this.handleDelete = this.handleDelete.bind(this);\r\n    this.clearLogs = this.clearLogs.bind(this);\r\n  }\r\n\r\n\r\n  public componentDidMount(){\r\n    this.loadMessageTypes();\r\n    this.loadClasses();\r\n    this.loadRunningAgents();\r\n  }\r\n\r\n  private getHostAddress(){\r\n    var url : string = window.location.href;\r\n    return url.replace(/(^\\w+:|^)\\/\\//, '');\r\n  }\r\n\r\n  private loadMessageTypes(){\r\n    let url = window.location.href+'rest/messages';\r\n\r\n        axios.get(url)\r\n            .then(res => {\r\n                this.setState({\r\n                  messageTypes: res.data});\r\n\r\n                  if(this.state.messageTypes.length > 0 ){\r\n                    this.setState({\r\n                      selectedMessageType : this.state.messageTypes[0]\r\n                    });\r\n                  }\r\n    })\r\n  }\r\n\r\n  private loadClasses(){\r\n    let url = window.location.href+'rest/agents/classes/';\r\n\r\n        axios.get(url)\r\n            .then(res => {\r\n                this.setState({\r\n                  classes: res.data.list});\r\n\r\n                  if(this.state.classes.length > 0 ){\r\n                    this.setState({\r\n                      createInstanceClass : this.state.classes[0]\r\n                    });\r\n                  }\r\n    })\r\n  }\r\n\r\n  private loadRunningAgents(){\r\n    let url = window.location.href+'rest/agents/running/';\r\n\r\n        axios.get(url)\r\n            .then(res => {\r\n                this.setState({\r\n                  runningAgents: res.data.list\r\n        });\r\n        this.setState(\r\n          {\r\n            localRunningAgents: (this.state.runningAgents.filter((runningAgent) =>\r\n              runningAgent.aid.host.address === window.location.host))\r\n            })\r\n    \r\n            if(this.state.runningAgents.length > 0){\r\n              this.setState({\r\n                reciever : '0'\r\n              })\r\n            }\r\n            else{\r\n              this.setState({\r\n                reciever : '',\r\n              })\r\n            }\r\n    \r\n          if(this.state.localRunningAgents.length > 0){\r\n            this.setState({\r\n              sender : '0'\r\n            })\r\n          }\r\n          else{\r\n            this.setState({\r\n              sender : ''\r\n            })\r\n          }\r\n    })\r\n  }\r\n\r\n  private handleCreate(event:any){\r\n    event.preventDefault();\r\n    let url = window.location.href+'rest/agents/running/'+this.state.createInstanceClass+'/'+this.state.createInstanceName;\r\n    axios.post(url);\r\n  }\r\n\r\n  private handleDelete(agentClass: string, agentName: string){\r\n    let url = window.location.href+'rest/agents/running/'+agentClass+'/'+agentName;\r\n    axios.delete(url);\r\n  }\r\n\r\n  private handleSendMessage(event:any){\r\n    event.preventDefault();\r\n    let url = window.location.href+'rest/messages';\r\n\r\n    let sender = this.state.localRunningAgents[Number(this.state.sender)];\r\n    let reciever = this.state.runningAgents[Number(this.state.reciever)];\r\n    var data : IMessageData;\r\n    data = {\r\n      performative: this.state.selectedMessageType,\r\n      conversationID: uuidv4(),\r\n      receivers:[ reciever.aid]\r\n    }\r\n\r\n    if(this.state.senderRequired){\r\n      data.sender = sender.aid\r\n    }\r\n\r\n    if(this.state.messageRequired){\r\n      data.content = this.state.message\r\n    }\r\n\r\n    axios.post(url, data);\r\n  }\r\n  \r\n  private handleCreateInstanceClassChange(event: any) {\r\n    this.setState({\r\n        createInstanceClass: event.target.value\r\n    })\r\n  }\r\n\r\n  private handleCreateInstanceNameChange(event: any) {\r\n    this.setState({\r\n        createInstanceName: event.target.value\r\n    })\r\n  }\r\n\r\n  private handleSelectedMessageTypeChange(event: any) {\r\n    this.setState({\r\n        selectedMessageType: event.target.value\r\n    })\r\n  }\r\n\r\n  private handleSenderRequiredChange(event: any) {\r\n    this.setState({\r\n        senderRequired: event.target.checked\r\n    })\r\n  }\r\n\r\n  private handleSenderChange(event: any) {\r\n    this.setState({\r\n        sender: event.targsenet.value\r\n    })\r\n  }\r\n\r\n  private handleRecieverChange(event: any) {\r\n    this.setState({\r\n        reciever: event.target.value\r\n    })\r\n  }\r\n\r\n  private handleMessageRequiredChange(event: any) {\r\n    this.setState({\r\n        messageRequired: event.target.checked\r\n    })\r\n  }\r\n\r\n  private handleMessageChange(event: any) {\r\n    this.setState({\r\n        message: event.target.value\r\n    })\r\n  }\r\n\r\n  private clearLogs(event: any) {\r\n    this.setState({\r\n        logs: []\r\n    })\r\n  }\r\n\r\n   public render(){\r\n     return (\r\n      <div style={{ width: \"50em\", marginLeft:\"auto\", marginRight:\"auto\"}}>       \r\n      <h1>Classes</h1>\r\n      <div style={{marginLeft:\"3em\"}}>\r\n      <form onSubmit={this.handleCreate}>\r\n        <select value={this.state.createInstanceClass} onChange={this.handleCreateInstanceClassChange}>\r\n        {this.state.classes.map((item) => (\r\n          <option>{item}</option>\r\n      ))}\r\n        </select>\r\n        &emsp;\r\n        <input placeholder=\"Enter instance name...\" value={this.state.createInstanceName} onChange={this.handleCreateInstanceNameChange}></input>\r\n        &emsp;\r\n        <input type=\"submit\" value=\"Submit\" disabled={this.state.createInstanceClass.trim() ===\"\" || this.state.createInstanceName.trim() ===\"\"}></input>\r\n      </form> \r\n      </div>     \r\n      <br/>\r\n      <h1>Running Agents</h1>\r\n      <table style={{marginLeft:\"3em\", borderSpacing: \"0.5em\"}}>\r\n        <tbody>\r\n          {this.state.runningAgents.map(item =>(\r\n            <tr>\r\n              <td>{item.aid.name}</td>\r\n              <td><button onClick={() => this.handleDelete(item.aid.type.name, item.aid.name)}>Delete</button></td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <br/>\r\n      <h1>Messages</h1>\r\n      <form onSubmit={this.handleSendMessage}>\r\n      <table style={{marginLeft:\"3em\", borderSpacing: \"0.5em\"}}>\r\n      <tbody>\r\n        <tr>\r\n      <td>Sender: </td>\r\n      <td><input type=\"checkbox\" checked={this.state.senderRequired} onChange={this.handleSenderRequiredChange}></input>\r\n      <select value={this.state.sender} onChange={this.handleSenderChange} disabled={!this.state.senderRequired}>\r\n        {this.state.localRunningAgents.map((item,index) => (\r\n          <option value ={index}>{item.aid.name}</option>\r\n      ))}\r\n        </select>\r\n        </td>\r\n        </tr>\r\n        <tr>\r\n        <td>Reciever: </td>\r\n        <td> &emsp; <select value={this.state.reciever} onChange={this.handleRecieverChange}>\r\n        {this.state.runningAgents.map((item,index) => (\r\n          <option value ={index}>{item.aid.name}</option>\r\n      ))}\r\n        </select>\r\n        </td>\r\n        </tr>\r\n        <tr>\r\n        <td>Message type: </td>\r\n        <td> &emsp; <select value={this.state.selectedMessageType} onChange={this.handleSelectedMessageTypeChange}>\r\n        {this.state.messageTypes.map(item => (\r\n          <option>{item}</option>\r\n      ))}\r\n        </select>\r\n        </td>\r\n        </tr>\r\n        <tr>\r\n        <td>Message: </td>        \r\n        <td>\r\n        <input type=\"checkbox\" checked={this.state.messageRequired} onChange={this.handleMessageRequiredChange}></input> \r\n        <input placeholder=\"Enter message...\" value={this.state.message} onChange={this.handleMessageChange} disabled={!this.state.messageRequired}></input>\r\n        </td>\r\n        </tr>\r\n        <tr>\r\n        <input type=\"submit\" value=\"Submit\" disabled={(this.state.sender.trim()===\"\" && this.state.senderRequired === true) || this.state.reciever.trim()===\"\" || (this.state.message.trim() ===\"\" && this.state.messageRequired === true) || this.state.selectedMessageType.trim() ===\"\"}></input>\r\n        </tr>\r\n      </tbody>\r\n      </table>\r\n      </form>\r\n      <br/>\r\n      <h1>Logs</h1>\r\n      <div style={{ marginLeft:\"3em\"}}>\r\n        <button onClick={this.clearLogs}>Clear</button>\r\n        <div style={{ paddingLeft: \"1em\", paddingRight:\"1em\", paddingTop:\"1em\", paddingBottom:\"1em\", height: \"6.5em\", marginTop:\"1em\", overflowY:\"scroll\", border: \"solid\", borderWidth:\"0.01em\"}}>\r\n        {this.state.logs.map(item =>(\r\n          <p>{item}</p>\r\n        ))}\r\n        </div>\r\n      </div>\r\n      <br/>\r\n      <h1>Search results</h1>\r\n      <table style={{marginLeft:\"3em\"}}>\r\n        <tbody>\r\n        {this.state.searchResults.map(item =>(\r\n          <tr style={{backgroundColor:\"#ACF3D3\"}}>\r\n            <div>\r\n              <p style={{float : \"left\"}}>{item.name}</p>\r\n              <p style={{float : \"right\"}}><a href={item.url}>{item.url}</a></p>\r\n            </div>\r\n              <p style={{float:\"left\", clear:\"both\"}}>{item.description}</p>\r\n            <br/>\r\n          </tr>\r\n        ))}\r\n        </tbody>\r\n      </table> \r\n      </div>\r\n     )\r\n   }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}